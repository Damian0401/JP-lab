package frames;

import frames.utils.AMainFrame;
import interfaces.services.IAddressService;
import interfaces.services.IPickupService;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import models.Address;
import models.PickupPoint;
import utils.enums.MediumType;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class AddPickupPointFrame extends JFrame {
    private JTextField idTextField;
    private JComboBox<MediumType> mediumTypeComboBox;
    private JTextField streetTextField;
    private JLabel identifierLabel;
    private JLabel mediumTypeLabel;
    private JLabel streetLabel;
    private JButton addButton;
    private JButton cancelButton;
    private JPanel mainPanel;
    private JTextField houseNumberTextField;
    private JLabel houseNumberLabel;
    private JLabel postalCodeLabel;
    private JTextField postalCodeTextField;
    private final IAddressService addressService;
    private final IPickupService pickupService;
    private final AMainFrame mainFrame;

    public AddPickupPointFrame(IAddressService addressService, IPickupService pickupService, AMainFrame mainFrame) {
        this.addressService = addressService;
        this.pickupService = pickupService;
        this.mainFrame = mainFrame;
        initializeComponents();
        initializeFrame();
    }

    private void initializeFrame() {
        setTitle("AddPickupPoint");
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        mainPanel.setBorder(new EmptyBorder(10, 10, 10, 10));
        setContentPane(mainPanel);
        setSize(350, 300);
        setLocationRelativeTo(null);
        setVisible(true);
    }

    private void initializeComponents() {
        mainPanel.setBackground(new Color(232, 189, 9, 166));
        mediumTypeComboBox.setModel(new DefaultComboBoxModel<>(MediumType.values()));
        cancelButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dispose();
            }
        });
        addButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                tryAddPickupPoint();
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(9, 2, new Insets(0, 0, 0, 0), -1, -1));
        identifierLabel = new JLabel();
        identifierLabel.setText("Identifier:");
        mainPanel.add(identifierLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        idTextField = new JTextField();
        mainPanel.add(idTextField, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        mediumTypeLabel = new JLabel();
        mediumTypeLabel.setText("MediumType:");
        mainPanel.add(mediumTypeLabel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mediumTypeComboBox = new JComboBox();
        mainPanel.add(mediumTypeComboBox, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        streetLabel = new JLabel();
        streetLabel.setText("Street:");
        streetLabel.setToolTipText("");
        mainPanel.add(streetLabel, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        streetTextField = new JTextField();
        streetTextField.setToolTipText("");
        mainPanel.add(streetTextField, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        addButton = new JButton();
        addButton.setText("Add");
        mainPanel.add(addButton, new GridConstraints(8, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cancelButton = new JButton();
        cancelButton.setText("Cancel");
        mainPanel.add(cancelButton, new GridConstraints(8, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        houseNumberTextField = new JTextField();
        mainPanel.add(houseNumberTextField, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        houseNumberLabel = new JLabel();
        houseNumberLabel.setText("House number:");
        mainPanel.add(houseNumberLabel, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        postalCodeLabel = new JLabel();
        postalCodeLabel.setText("Postal code:");
        mainPanel.add(postalCodeLabel, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        postalCodeTextField = new JTextField();
        mainPanel.add(postalCodeTextField, new GridConstraints(7, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    private void tryAddPickupPoint() {
        var id = idTextField.getText();
        var mediumType = mediumTypeComboBox.getSelectedItem();
        var street = streetTextField.getText();
        var postalCode = postalCodeTextField.getText();
        var houseNumber = houseNumberTextField.getText();
        if (dataAreValid(id, street, houseNumber)) {
            var address = new Address();
            address.setStreet(street);
            address.setPostCode(postalCode);
            address.setHouseNumber(parseIntOrNull(houseNumber));
            var pickupPoint = new PickupPoint();
            pickupPoint.setMediumType((MediumType) mediumType);
            pickupPoint.setId(id);
            addPickupPoint(pickupPoint, address);
            return;
        }
        JOptionPane.showMessageDialog(this, "Entered invalid data");
    }

    private boolean dataAreValid(String id, String street, String houseNumber) {
        if (id.isEmpty() || id.isBlank())
            return false;
        if (street.isEmpty() || street.isBlank())
            return false;
        if (parseIntOrNull(houseNumber) == null)
            return false;
        return true;
    }

    public Integer parseIntOrNull(String value) {
        try {
            return Integer.parseInt(value);
        } catch (NumberFormatException e) {
            return null;
        }
    }

    private void clearTextFields() {
        idTextField.setText("");
        streetTextField.setText("");
        postalCodeTextField.setText("");
        houseNumberTextField.setText("");
    }

    private void addPickupPoint(PickupPoint pickupPoint, Address address) {
        try {
            if (pickupService.getPickupPointById(pickupPoint.getId()) != null) {
                JOptionPane.showMessageDialog(this, "PickupPoint with id '"
                        + pickupPoint.getId() + "' already exists");
                return;
            }
            var addressId = addressService.getIdOfAddress(address);
            if (addressId == null) {
                addressId = addressService.addAddress(address);
                mainFrame.refreshAddressesTable();
            }
            pickupPoint.setAddressId(addressId);
            var isAdded = pickupService.addPickupPoint(pickupPoint);
            if (isAdded) {
                mainFrame.refreshPickupPointsTable();
                clearTextFields();
                JOptionPane.showMessageDialog(this, "Registered pickupPoint successfully");
            } else
                JOptionPane.showMessageDialog(this, "Unable to add pickupPoint");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error occurred");
        }
    }

}
