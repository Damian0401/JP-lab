package frames;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import frames.utils.AMainFrame;
import interfaces.services.IPickupService;
import interfaces.services.IReadingService;
import models.Reading;
import utils.enums.MediumType;
import utils.enums.ReadType;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

public class AddReadingFrame extends JFrame {
    private JLabel readTypeLabel;
    private JComboBox<ReadType> readTypeComboBox;
    private JTextField dateTextField;
    private JLabel dateLabel;
    private JButton addButton;
    private JButton cancelButton;
    private JTextField pickupPointIdTextField;
    private JPanel mainPanel;
    private JLabel pickupPointIdLabel;
    private JTextField valueTextField;
    private JLabel valueLabel;
    private final IReadingService readingService;
    private final IPickupService pickupService;
    private final AMainFrame mainFrame;

    public AddReadingFrame(IReadingService readingService, IPickupService pickupService, AMainFrame mainFrame) {
        this.readingService = readingService;
        this.pickupService = pickupService;
        this.mainFrame = mainFrame;
        initializeFrame();
        initializeComponents();
    }

    private void initializeFrame() {
        setTitle("AddReadings");
        setContentPane(mainPanel);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setSize(300, 300);
        mainPanel.setBorder(new EmptyBorder(10, 10, 10, 10));
        mainPanel.setBackground(new Color(232, 189, 9, 166));
        setLocationRelativeTo(null);
        setVisible(true);
    }

    private void initializeComponents() {
        readTypeComboBox.setModel(new DefaultComboBoxModel<>(ReadType.values()));
        cancelButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dispose();
            }
        });
        addButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                tryAddReading();
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(9, 5, new Insets(0, 0, 0, 0), -1, -1));
        dateLabel = new JLabel();
        dateLabel.setText("Date:");
        mainPanel.add(dateLabel, new GridConstraints(0, 0, 1, 4, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        dateTextField = new JTextField();
        dateTextField.setToolTipText("yyyy-mm-dd");
        mainPanel.add(dateTextField, new GridConstraints(1, 0, 1, 5, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        cancelButton = new JButton();
        cancelButton.setText("Cancel");
        mainPanel.add(cancelButton, new GridConstraints(8, 2, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        addButton = new JButton();
        addButton.setText("Add");
        mainPanel.add(addButton, new GridConstraints(8, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        pickupPointIdLabel = new JLabel();
        pickupPointIdLabel.setText("PickupPointId:");
        mainPanel.add(pickupPointIdLabel, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        pickupPointIdTextField = new JTextField();
        mainPanel.add(pickupPointIdTextField, new GridConstraints(7, 0, 1, 5, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        readTypeComboBox = new JComboBox();
        mainPanel.add(readTypeComboBox, new GridConstraints(5, 0, 1, 5, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        readTypeLabel = new JLabel();
        readTypeLabel.setText("ReadType:");
        mainPanel.add(readTypeLabel, new GridConstraints(4, 0, 1, 4, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        valueLabel = new JLabel();
        valueLabel.setText("Value:");
        mainPanel.add(valueLabel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        valueTextField = new JTextField();
        mainPanel.add(valueTextField, new GridConstraints(3, 0, 1, 5, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    private void tryAddReading() {
        var date = dateTextField.getText();
        var value = valueTextField.getText();
        var readType = readTypeComboBox.getSelectedItem();
        var pickupPointId = pickupPointIdTextField.getText();
        if (dataAreValid(date, value, pickupPointId)) {
            var reading = new Reading();
            reading.setDate(parseLocalDateOrNull(date));
            reading.setValue(parseDoubleOrNull(value));
            reading.setPickupPointId(pickupPointId);
            reading.setReadType((ReadType) readType);
            addReading(reading);
            return;
        }
        JOptionPane.showMessageDialog(this, "Entered invalid data");
    }

    private boolean dataAreValid(String date, String value, String pickupPointId) {
        if (pickupPointId.isEmpty() || pickupPointId.isBlank())
            return false;
        if (parseDoubleOrNull(value) == null)
            return false;
        if (parseLocalDateOrNull(date) == null)
            return false;
        return true;
    }

    private LocalDate parseLocalDateOrNull(String value) {
        try {
            return LocalDate.parse(value);
        } catch (Exception e) {
            return null;
        }
    }

    private Double parseDoubleOrNull(String value) {
        try {
            return Double.parseDouble(value);
        } catch (Exception e) {
            return null;
        }
    }

    private void clearTextFields() {
        dateTextField.setText("");
        valueTextField.setText("");
        pickupPointIdTextField.setText("");
    }

    private void addReading(Reading reading) {
        try {
            var pickupPoint = pickupService.getPickupPointById(reading.getPickupPointId());
            if (pickupPoint == null) {
                JOptionPane.showMessageDialog(this, "Invalid pickupPointId");
                return;
            }
            var readingId = readingService.addReading(reading);
            clearTextFields();
            mainFrame.refreshReadingsTable();
            JOptionPane.showMessageDialog(this, "Reading added successfully\nid: " + readingId);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Unable to add reading");
        }
    }
}
