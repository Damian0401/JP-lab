package frames;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import frames.charts.TimeSeriesChart;
import interfaces.ITimeSeriesCollector;
import interfaces.services.IPickupService;
import interfaces.services.IReadingService;
import models.Pair;
import models.PickupPoint;
import org.jfree.data.time.Day;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import utils.TimeSeriesCollector;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.LocalDate;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;

public class DifferenceChartGenerator extends JFrame {
    private JPanel mainPanel;
    private JLabel identifiersLabel;
    private JList<String> identifiersList;
    private JTextField startDateTextField;
    private JLabel startDateLabel;
    private JLabel endDateLabel;
    private JTextField endDateTextField;
    private JButton generateButton;
    private JButton cancelButton;
    private final IPickupService pickupService;
    private final IReadingService readingService;

    public DifferenceChartGenerator(IPickupService pickupService, IReadingService readingService) {
        this.pickupService = pickupService;
        this.readingService = readingService;
        initializeFrame();
        initializeComponents();
    }

    private void initializeFrame() {
        setTitle("DifferenceChartGenerator");
        setContentPane(mainPanel);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setSize(375, 300);
        mainPanel.setBorder(new EmptyBorder(10, 10, 10, 10));
        mainPanel.setBackground(new Color(232, 189, 9, 166));
        setLocationRelativeTo(null);
        setVisible(true);
    }

    private void initializeComponents() {
        try {
            var identifiers = pickupService.getListOfIds();
            var listModel = new DefaultListModel<String>();
            listModel.addAll(identifiers);
            identifiersList.setModel(listModel);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Unable to load identifiers");
        }
        generateButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                var startDate = startDateTextField.getText();
                var endDate = endDateTextField.getText();
                var selectedIdentifiers = identifiersList.getSelectedValuesList();
                if (dataAreValid(startDate, endDate, selectedIdentifiers)) {
                    generateChart(startDate, endDate, selectedIdentifiers);
                    return;
                }
                JOptionPane.showMessageDialog(null, "Entered invalid data");
            }
        });
        cancelButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dispose();
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(8, 3, new Insets(0, 0, 0, 0), -1, -1));
        identifiersLabel = new JLabel();
        identifiersLabel.setText("Identifires:");
        mainPanel.add(identifiersLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        identifiersList = new JList();
        mainPanel.add(identifiersList, new GridConstraints(1, 0, 7, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        startDateTextField = new JTextField();
        startDateTextField.setToolTipText("yyyy-mm-dd");
        mainPanel.add(startDateTextField, new GridConstraints(2, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        endDateLabel = new JLabel();
        endDateLabel.setText("EndDate:");
        mainPanel.add(endDateLabel, new GridConstraints(3, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        endDateTextField = new JTextField();
        endDateTextField.setToolTipText("yyyy-mm-dd");
        mainPanel.add(endDateTextField, new GridConstraints(4, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        startDateLabel = new JLabel();
        startDateLabel.setText("StartDate:");
        mainPanel.add(startDateLabel, new GridConstraints(1, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        generateButton = new JButton();
        generateButton.setText("Generate");
        mainPanel.add(generateButton, new GridConstraints(6, 1, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cancelButton = new JButton();
        cancelButton.setText("Cancel");
        mainPanel.add(cancelButton, new GridConstraints(6, 2, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    private void generateChart(String startDate, String endDate, List<String> selectedIdentifiers) {
        var parsedStartDate = parseLocalDateOrNull(startDate);
        var parsedEndDate = parseLocalDateOrNull(endDate);
        var data = generateData(parsedStartDate, parsedEndDate, selectedIdentifiers);
        if (data != null) {
            new TimeSeriesChart("Differences chart", data);
            return;
        }
        JOptionPane.showMessageDialog(null, "Unable to generate chart");
    }

    private boolean dataAreValid(String startDate, String endDate, List<String> selectedIdentifiers) {
        if (parseLocalDateOrNull(startDate) == null)
            return false;
        if (parseLocalDateOrNull(endDate) == null)
            return false;
        if (parseLocalDateOrNull(startDate).isAfter(parseLocalDateOrNull(endDate)))
            return false;
        if (selectedIdentifiers.size() == 0)
            return false;
        return true;
    }

    private LocalDate parseLocalDateOrNull(String value) {
        try {
            return LocalDate.parse(value);
        } catch (Exception e) {
            return null;
        }
    }

    private TimeSeriesCollection generateData(LocalDate startDate, LocalDate endDate, List<String> selectedIdentifiers) {
        try {
            var pickupPoints = new LinkedList<PickupPoint>();
            var timeSeriesCollection = new TimeSeriesCollection();
            ITimeSeriesCollector seriesCollector = new TimeSeriesCollector();
            for (var id : selectedIdentifiers) {
                pickupPoints.add(pickupService.getPickupPointById(id));
            }
            for (var pickupPoint : pickupPoints) {
                var realReadings = readingService.getRealReadingsByPickupPointId(pickupPoint.getId());
                var populatedRealData = seriesCollector.populateData(realReadings, startDate, endDate);
                var realTimeSeries = createTimeSeries(populatedRealData, pickupPoint.getId() + "(real)");
                var expectedReadings = readingService.getExpectedReadingsByPickupPointId(pickupPoint.getId());
                var populatedExpectedData = seriesCollector.populateData(expectedReadings, startDate, endDate);
                var expectedTimeSeries = createTimeSeries(populatedExpectedData, pickupPoint.getId() + "(expected)");
                populatedRealData.sort(Comparator.comparing(Pair::getKey));
                populatedExpectedData.sort(Comparator.comparing(Pair::getKey));
                var populatedDifferencesData = new LinkedList<Pair>();
                for (int i = 0; i < populatedRealData.size(); i++) {
                    var date = populatedRealData.get(i).getKey();
                    var value = Math.abs(populatedRealData.get(i).getValue() - populatedExpectedData.get(i).getValue());
                    populatedDifferencesData.add(new Pair(date, value));
                }
                var differencesTimeSeries = createTimeSeries(populatedDifferencesData, pickupPoint.getId() + "(differences)");
                timeSeriesCollection.addSeries(realTimeSeries);
                timeSeriesCollection.addSeries(expectedTimeSeries);
                timeSeriesCollection.addSeries(differencesTimeSeries);
            }
            return timeSeriesCollection;
        } catch (Exception e) {
            return null;
        }
    }

    private Day localDateToDay(LocalDate localDate) {
        return new Day(localDate.getDayOfMonth(), localDate.getMonthValue(), localDate.getYear());
    }

    private TimeSeries createTimeSeries(List<Pair> data, String title) {
        var timeSeries = new TimeSeries(title);
        for (var pair : data)
            timeSeries.add(localDateToDay(pair.getKey()), pair.getValue());
        return timeSeries;
    }
}
