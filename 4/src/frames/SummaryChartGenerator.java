package frames;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import frames.charts.TimeSeriesChart;
import interfaces.services.IAddressService;
import interfaces.services.IPickupService;
import interfaces.services.IReadingService;
import models.Address;
import models.PickupPoint;
import org.jfree.data.time.Day;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import utils.TimeSeriesCollector;
import utils.enums.MediumType;
import utils.enums.ReadType;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.LocalDate;
import java.util.*;
import java.util.List;
import java.util.stream.Collectors;

public class SummaryChartGenerator extends JFrame {
    private JPanel mainPanel;
    private JList<String> addressesList;
    private JLabel addressesLabel;
    private JTextField startDateTextField;
    private JLabel startDateLabel;
    private JLabel endDateLabel;
    private JCheckBox gasCheckBox;
    private JCheckBox waterCheckBox;
    private JCheckBox electricityCheckBox;
    private JTextField endDateTextField;
    private JButton generateButton;
    private JButton cancelButton;
    private final IPickupService pickupService;
    private final IReadingService readingService;
    private final IAddressService addressService;

    public SummaryChartGenerator(IPickupService pickupService, IReadingService readingService, IAddressService addressService) {
        this.pickupService = pickupService;
        this.readingService = readingService;
        this.addressService = addressService;
        initializeFrame();
        initializeComponents();
    }

    private void initializeFrame() {
        setTitle("SummaryChartGenerator");
        setContentPane(mainPanel);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setSize(400, 300);
        mainPanel.setBorder(new EmptyBorder(10, 10, 10, 10));
        mainPanel.setBackground(new Color(232, 189, 9, 166));
        setLocationRelativeTo(null);
        setVisible(true);
    }

    private void initializeComponents() {
        gasCheckBox.setOpaque(false);
        waterCheckBox.setOpaque(false);
        electricityCheckBox.setOpaque(false);
        try {
            var fullNames = addressService.getListOfFullNames();
            var listModel = new DefaultListModel<String>();
            listModel.addAll(fullNames);
            addressesList.setModel(listModel);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Unable to load addresses");
        }
        generateButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                var startDate = startDateTextField.getText();
                var endDate = endDateTextField.getText();
                var selectedAddresses = addressesList.getSelectedValuesList();
                var selectedMediumTypes = getSelectedMediumType();
                if (dataAreValid(startDate, endDate, selectedAddresses, selectedMediumTypes)) {
                    generateChart(startDate, endDate, selectedAddresses, selectedMediumTypes);
                    return;
                }
                JOptionPane.showMessageDialog(null, "Entered invalid data");
            }
        });
        cancelButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dispose();
            }
        });
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(9, 5, new Insets(0, 0, 0, 0), -1, -1));
        addressesLabel = new JLabel();
        addressesLabel.setText("Addresses:");
        mainPanel.add(addressesLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        mainPanel.add(spacer1, new GridConstraints(0, 1, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        addressesList = new JList();
        mainPanel.add(addressesList, new GridConstraints(1, 0, 8, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("MediumTypes:");
        mainPanel.add(label1, new GridConstraints(1, 1, 1, 4, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        startDateLabel = new JLabel();
        startDateLabel.setText("StartDate:");
        mainPanel.add(startDateLabel, new GridConstraints(3, 1, 1, 4, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        startDateTextField = new JTextField();
        startDateTextField.setToolTipText("yyyy-mm-dd");
        mainPanel.add(startDateTextField, new GridConstraints(4, 1, 1, 4, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        endDateLabel = new JLabel();
        endDateLabel.setText("EndDate:");
        mainPanel.add(endDateLabel, new GridConstraints(5, 1, 2, 4, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        gasCheckBox = new JCheckBox();
        gasCheckBox.setSelected(false);
        gasCheckBox.setText("Gas");
        mainPanel.add(gasCheckBox, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        waterCheckBox = new JCheckBox();
        waterCheckBox.setSelected(false);
        waterCheckBox.setText("Water");
        mainPanel.add(waterCheckBox, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        electricityCheckBox = new JCheckBox();
        electricityCheckBox.setSelected(false);
        electricityCheckBox.setText("Electricity");
        mainPanel.add(electricityCheckBox, new GridConstraints(2, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        endDateTextField = new JTextField();
        endDateTextField.setToolTipText("yyyy-mm-dd");
        mainPanel.add(endDateTextField, new GridConstraints(7, 1, 1, 4, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        cancelButton = new JButton();
        cancelButton.setText("Cancel");
        mainPanel.add(cancelButton, new GridConstraints(8, 3, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        generateButton = new JButton();
        generateButton.setText("Generate");
        mainPanel.add(generateButton, new GridConstraints(8, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    private boolean dataAreValid(String startDate, String endDate, List<String> selectedAddresses,
                                 List<MediumType> selectedMediumTypes) {
        if (parseLocalDateOrNull(startDate) == null)
            return false;
        if (parseLocalDateOrNull(endDate) == null)
            return false;
        if (parseLocalDateOrNull(startDate).isAfter(parseLocalDateOrNull(endDate)))
            return false;
        if (selectedAddresses.size() == 0)
            return false;
        if (selectedMediumTypes.size() == 0)
            return false;
        return true;
    }

    private LocalDate parseLocalDateOrNull(String value) {
        try {
            return LocalDate.parse(value);
        } catch (Exception e) {
            return null;
        }
    }

    private List<MediumType> getSelectedMediumType() {
        var selectedMediumTypes = new ArrayList<MediumType>();
        if (gasCheckBox.isSelected())
            selectedMediumTypes.add(MediumType.Gas);
        if (waterCheckBox.isSelected())
            selectedMediumTypes.add(MediumType.Water);
        if (electricityCheckBox.isSelected())
            selectedMediumTypes.add(MediumType.Electricity);
        return selectedMediumTypes;
    }

    private void generateChart(String startDate, String endDate, List<String> selectedAddresses, List<MediumType> selectedMediumTypes) {
        var parsedStartDate = parseLocalDateOrNull(startDate);
        var parsedEndDate = parseLocalDateOrNull(endDate);
        var data = generateData(parsedStartDate, parsedEndDate, selectedAddresses, selectedMediumTypes);
        if (data != null) {
            new TimeSeriesChart("SummaryChart", data);
            return;
        }
        JOptionPane.showMessageDialog(null, "Unable to generate chart");
    }

    private TimeSeriesCollection generateData(LocalDate startDate, LocalDate endDate, List<String> selectedAddresses, List<MediumType> selectedMediumTypes) {
        try {
            var timeSeriesCollection = new TimeSeriesCollection();
            var addresses = new LinkedList<Address>();
            Address addressForLoop;
            for (var fullName : selectedAddresses) {
                addressForLoop = addressService.getAddressByFullName(fullName);
                if (addressForLoop != null)
                    addresses.add(addressForLoop);
            }
            List<PickupPoint> pickupPointsForLoop;
            for (var address : addresses) {
                pickupPointsForLoop = pickupService.getPickupPointsByAddressId(address.getId());
                for (var type : selectedMediumTypes) {
                    var pickupPoints = pickupPointsForLoop.stream().
                            filter(x -> x.getMediumType() == type)
                            .collect(Collectors.toList());
                    if (pickupPoints.size() != 0) {
                        var realSeries = generateTimeSeries(startDate, endDate, pickupPoints, address.getFullName() + "(" + type + "-real)", ReadType.Real);
                        if (realSeries != null)
                            timeSeriesCollection.addSeries(realSeries);
                        var expectedSeries = generateTimeSeries(startDate, endDate, pickupPoints, address.getFullName() + "(" + type + "-expected)", ReadType.Expected);
                        if (expectedSeries != null)
                            timeSeriesCollection.addSeries(expectedSeries);
                    }
                }
            }
            return timeSeriesCollection;
        } catch (Exception e) {
            return null;
        }
    }

    private TimeSeries generateTimeSeries(LocalDate startDate, LocalDate endDate, List<PickupPoint> pickupPoints, String title, ReadType readType) {
        var timeSeries = new TimeSeries(title);
        try {
            var seriesCollector = new TimeSeriesCollector();
            var mapOfData = new HashMap<LocalDate, Double>();
            var dataNumber = 0;
            for (var pickupPoint : pickupPoints) {
                var readings = readType == ReadType.Real
                        ? readingService.getRealReadingsByPickupPointId(pickupPoint.getId())
                        : readingService.getExpectedReadingsByPickupPointId(pickupPoint.getId());
                if (readings.size() != 0) {
                    var rawData = seriesCollector.populateData(readings, startDate, endDate);
                    for (var data : rawData) {
                        mapOfData.merge(data.getKey(), data.getValue(), Double::sum);
                    }
                    dataNumber++;
                }
            }
            if (dataNumber == 0)
                return null;
            for (var entry : mapOfData.entrySet())
                mapOfData.put(entry.getKey(), entry.getValue() / dataNumber);
            mapOfData.forEach((v, k) -> timeSeries.add(localDateToDay(v), k));
        } catch (Exception e) {
            return null;
        }
        return timeSeries.isEmpty() ? null : timeSeries;
    }

    private Day localDateToDay(LocalDate localDate) {
        return new Day(localDate.getDayOfMonth(), localDate.getMonthValue(), localDate.getYear());
    }
}
