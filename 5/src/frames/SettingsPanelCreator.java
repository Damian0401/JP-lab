package frames;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import interfaces.ISettingsCreator;
import models.TimeSettings;
import threads.Chef;
import threads.Guest;
import threads.Mover;
import threads.utils.RunnableAndFinishable;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import java.awt.*;

public class SettingsPanelCreator implements ISettingsCreator {
    private JSlider moverDelaySlider;
    private JButton startStopButton;
    private JSlider chefsDelaySlider;
    private JPanel mainPanel;
    private JLabel chefsDelayLabel;
    private JLabel moverDelayLabel;
    private JSlider guestAppearingDelaySlider;
    private JButton exitButton;
    private JLabel guestAppearingLabel;
    private final int maxChefDelay;
    private final int maxMoverDelay;
    private final int maxGuestAppearingDelay;
    private final TimeSettings timeSettings;
    private final List<RunnableAndFinishable> runnableInstances;
    private boolean isStarted = false;

    public SettingsPanelCreator(TimeSettings timeSettings, List<RunnableAndFinishable> runnableInstances) {
        this.timeSettings = timeSettings;
        this.runnableInstances = runnableInstances;
        maxChefDelay = timeSettings.getChefDelay() * 2;
        maxMoverDelay = timeSettings.getMoverDelay() * 2;
        maxGuestAppearingDelay = timeSettings.getGuestAppearingDelay() * 2;
        initializeComponents();
    }

    private void initializeComponents() {
        chefsDelayLabel.setText("Chefs delay: " + timeSettings.getChefDelay());
        moverDelayLabel.setText("Mover delay: " + timeSettings.getMoverDelay());
        guestAppearingLabel.setText("Guest appearing:" + timeSettings.getGuestAppearingDelay());
        chefsDelaySlider.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                timeSettings.setChefDelay(chefsDelaySlider.getValue() * maxChefDelay / 100);
                chefsDelayLabel.setText("Chefs delay: " + timeSettings.getChefDelay());
            }
        });
        moverDelaySlider.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                timeSettings.setMoverDelay(moverDelaySlider.getValue() * maxMoverDelay / 100);
                moverDelayLabel.setText("Mover delay: " + timeSettings.getMoverDelay());
            }
        });
        guestAppearingDelaySlider.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                timeSettings.setGuestAppearingDelay(guestAppearingDelaySlider.getValue() * maxGuestAppearingDelay / 100);
                guestAppearingLabel.setText("Guest appearing: " + timeSettings.getGuestAppearingDelay());
            }
        });
        startStopButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (!isStarted)
                    start();
                else
                    stop();
            }
        });
        exitButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        });
    }

    private void start() {

        runnableInstances.forEach(x -> new Thread(x).start());
        isStarted = true;
    }

    private void stop() {
        runnableInstances.forEach(RunnableAndFinishable::finish);
    }

    @Override
    public JComponent getSettingsComponent() {
        return $$$getRootComponent$$$();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(4, 3, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        moverDelaySlider = new JSlider();
        moverDelaySlider.setMaximum(100);
        moverDelaySlider.setMinimum(10);
        moverDelaySlider.setOrientation(1);
        moverDelaySlider.setValue(50);
        mainPanel.add(moverDelaySlider, new GridConstraints(1, 1, 2, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        chefsDelayLabel = new JLabel();
        chefsDelayLabel.setText("Chefs delay");
        mainPanel.add(chefsDelayLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        moverDelayLabel = new JLabel();
        moverDelayLabel.setText("Mover delay");
        mainPanel.add(moverDelayLabel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel1, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        startStopButton = new JButton();
        startStopButton.setText("Start/Stop");
        panel1.add(startStopButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        chefsDelaySlider = new JSlider();
        chefsDelaySlider.setMaximum(100);
        chefsDelaySlider.setMinimum(10);
        chefsDelaySlider.setOrientation(1);
        chefsDelaySlider.setValue(50);
        mainPanel.add(chefsDelaySlider, new GridConstraints(1, 0, 2, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        guestAppearingDelaySlider = new JSlider();
        guestAppearingDelaySlider.setMinimum(10);
        guestAppearingDelaySlider.setOrientation(1);
        mainPanel.add(guestAppearingDelaySlider, new GridConstraints(1, 2, 2, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel2, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel2.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        exitButton = new JButton();
        exitButton.setText("Exit");
        panel2.add(exitButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        guestAppearingLabel = new JLabel();
        guestAppearingLabel.setText("Guest appearing");
        mainPanel.add(guestAppearingLabel, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
